<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hx.Cache</name>
    </assembly>
    <members>
        <member name="T:Hx.Cache.DefaultCache">
            <summary>
            内存缓存缓存
            </summary>
        </member>
        <member name="T:Hx.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="P:Hx.Cache.ICache.Instance">
            <summary>
            缓存的实例对象
            </summary>
        </member>
        <member name="P:Hx.Cache.ICache.CacheType">
            <summary>
            缓存实例类型
            </summary>
        </member>
        <member name="M:Hx.Cache.ICache.GetAllKeys">
            <summary>
            获取所有的缓存的key
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hx.Cache.ICache.Item(System.String)">
            <summary>
            获取和设置缓存，永不过期
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Hx.Cache.ICache.Count">
            <summary>
             缓存个数
            </summary>
        </member>
        <member name="M:Hx.Cache.ICache.ExistsKey(System.String)">
            <summary>
            是否包含缓存项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Set``1(System.String,``0,System.Int32)">
            <summary>
            设置缓存项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">过期时间，秒，-1：表示不过期</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置数据
            </summary>
            <typeparam name="T">数据的类型参数</typeparam>
            <param name="key">缓存的键</param>
            <param name="value">缓存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Get``1(System.String)">
            <summary>
            获取缓存项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Get(System.String)">
            <summary>
            获取数据
            </summary>
            <param name="key">缓存的键</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Set(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置数据
            </summary>
            <param name="key">缓存的键</param>
            <param name="value">缓存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Remove(System.String[])">
            <summary>
            批量移除缓存项
            </summary>
            <param name="keys">键集合</param>
        </member>
        <member name="M:Hx.Cache.ICache.RemoveByPrefix(System.String)">
            <summary>
            根据前缀移除缓存项
            </summary>
            <param name="prefixKey"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Cache.ICache.Clear">
            <summary>
             清空所有缓存项
            </summary>
        </member>
        <member name="M:Hx.Cache.ICache.SetRedisDbNum(System.Int32)">
            <summary>
            设置Redis数据库
            </summary>
            <param name="dbNum"></param>
        </member>
        <member name="M:Hx.Cache.ICache.TYPE(System.String)">
            <summary>
             获取指定键的数据结构类型
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Hx.Cache.RedisCache._dbNum">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="M:Hx.Cache.RedisCache.Do``1(System.Func{FreeRedis.IRedisClient,``0})">
            <summary>
            获取数据库
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Cache.CacheSettingsOptions">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:Hx.Cache.CacheSettingsOptions.CacheType">
            <summary>
            缓存类型
            Redis、Memory
            </summary>
        </member>
        <member name="P:Hx.Cache.CacheSettingsOptions.Redis">
            <summary>
            redis配置
            </summary>
        </member>
        <member name="P:Hx.Cache.CacheSettingsOptions.Memory">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="T:Hx.Cache.CacheTypeEnum">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:Hx.Cache.CacheTypeEnum.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:Hx.Cache.CacheTypeEnum.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:Hx.Cache.Options.RedisCacheSettingsOptions">
            <summary>
            redis缓存配置
            </summary>
        </member>
        <member name="P:Hx.Cache.Options.RedisCacheSettingsOptions.ConnectionString">
            <summary>
            用于连接到Redis的配置。
            </summary>
        </member>
        <member name="P:Hx.Cache.Options.RedisCacheSettingsOptions.SlaveConnectionStrings">
            <summary>
            Slave连接字符串
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CacheServiceCollextionExtensions">
            <summary>
            缓存的扩展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CacheServiceCollextionExtensions.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            增加了一个默认的实现<see cref="T:Hx.Cache.ICache"/>，将项目存储在 memory/redis到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />。
            需要分布式缓存工作的框架可以安全地将此依赖项添加到其依赖项列表中，以确保至少有一个实现可用。
            </summary>
            <remarks>
            <see cref="M:Microsoft.Extensions.DependencyInjection.CacheServiceCollextionExtensions.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/> 内存缓存应该只在单服务器场景中使用，因为该缓存将项目存储在内存中，
            不会跨多台机器扩展。对于这些场景，建议使用合适的分布式缓存(redis缓存)，可以跨多台机器扩展。
            </remarks>
            <param name="services"> <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 添加服务.</param>
            <returns> <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 这样额外的调用就可以被链接起来。</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CacheServiceCollextionExtensions.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hx.Cache.CacheSettingsOptions})">
            <summary>
            增加了一个默认的实现<see cref="T:Hx.Cache.ICache"/>，将项目存储在 memory/redis到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />。
            需要分布式缓存工作的框架可以安全地将此依赖项添加到其依赖项列表中，以确保至少有一个实现可用。
            </summary>
            <remarks>
            <see cref="M:Microsoft.Extensions.DependencyInjection.CacheServiceCollextionExtensions.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/> 内存缓存应该只在单服务器场景中使用，因为该缓存将项目存储在内存中，
            不会跨多台机器扩展。对于这些场景，建议使用合适的分布式缓存(redis缓存)，可以跨多台机器扩展。
            </remarks>
            <param name="services"> <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 添加服务.</param>
            <param name="setupAction">
             <see cref="T:System.Action`1"/> 要提供的配置 <see cref="T:Hx.Cache.CacheSettingsOptions"/>.
            </param>
            <returns> <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 这样额外的调用就可以被链接起来。</returns>
        </member>
    </members>
</doc>
