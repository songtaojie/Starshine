<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hx.Common</name>
    </assembly>
    <members>
        <member name="T:Hx.Common.CacheDataAttribute">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:Hx.Common.CacheDataAttribute.AbsoluteExpiration">
            <summary>
            缓存过期时间（分钟）
            </summary>
        </member>
        <member name="T:Hx.Common.DecimalPrecisionAttribute">
            <summary>
            自定义Decimal类型的精确度属性
            </summary>
        </member>
        <member name="M:Hx.Common.DecimalPrecisionAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            <para>自定义Decimal类型的精确度属性</para>
            </summary>
            <param name="precision">precision
            <para>精度（默认18）</para></param>
            <param name="scale">scale
            <para>小数位数（默认4）</para></param>
        </member>
        <member name="P:Hx.Common.DecimalPrecisionAttribute.Precision">
            <summary>
            精确度（默认18）
            </summary>
        </member>
        <member name="P:Hx.Common.DecimalPrecisionAttribute.Scale">
            <summary>
            保留位数（默认4）
            </summary>
        </member>
        <member name="T:Hx.Common.SkipScanAttribute">
            <summary>
            不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Hx.Common.AuditedEntityBase`1">
            <summary>
            带有更新信息的实体(泛型)
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Hx.Common.AuditedEntityBase`1.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Hx.Common.AuditedEntityBase`1.UpdaterId">
            <summary>
            更新者id
            </summary>
        </member>
        <member name="T:Hx.Common.AuditedEntityBase">
            <summary>
            带有更新信息的实体(非泛型，默认主键为雪花id)
            </summary>
        </member>
        <member name="P:Hx.Common.AuditedEntityBase.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Hx.Common.AuditedEntityBase.UpdaterId">
            <summary>
            更新者id
            </summary>
        </member>
        <member name="T:Hx.Common.BasePageParam">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:Hx.Common.BasePageParam.PageSize">
            <summary>
            每页多少条数据
            </summary>
        </member>
        <member name="P:Hx.Common.BasePageParam.Page">
            <summary>
            当前页码
            默认从第一页开始
            </summary>
        </member>
        <member name="P:Hx.Common.BasePageParam.SortField">
            <summary>
            排序的字段
            </summary>
        </member>
        <member name="P:Hx.Common.BasePageParam.OrderType">
            <summary>
            0 正序 1倒序
            </summary>
        </member>
        <member name="T:Hx.Common.OrderTypeEnum">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Hx.Common.OrderTypeEnum.ASC">
            <summary>
            正序
            </summary>
        </member>
        <member name="F:Hx.Common.OrderTypeEnum.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="T:Hx.Common.CreationEntityBase`1">
            <summary>
            带有创建信息的实体(泛型)
            </summary>
        </member>
        <member name="P:Hx.Common.CreationEntityBase`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Hx.Common.CreationEntityBase`1.CreatorId">
            <summary>
            创建者Id
            </summary>
        </member>
        <member name="T:Hx.Common.CreationEntityBase">
            <summary>
            带有创建信息的实体(非泛型，默认主键为雪花Id)
            </summary>
        </member>
        <member name="P:Hx.Common.CreationEntityBase.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Hx.Common.CreationEntityBase.CreatorId">
            <summary>
            创建者Id
            </summary>
        </member>
        <member name="T:Hx.Common.EntityBase`1">
            <summary>
            框架实体基类Id
            </summary>
        </member>
        <member name="P:Hx.Common.EntityBase`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:Hx.Common.EntityBase">
            <summary>
            框架实体基类Id
            </summary>
        </member>
        <member name="P:Hx.Common.EntityBase.Id">
            <summary>
            雪花Id
            </summary>
        </member>
        <member name="T:Hx.Common.FullAuditedEntityBase`1">
            <summary>
            带有状态数据的实体（泛型）
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase`1.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase`1.DeleterId">
            <summary>
            删除人id
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase`1.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Hx.Common.FullAuditedEntityBase">
            <summary>
            带有状态数据的实体（非泛型）
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase.DeleterId">
            <summary>
            删除人id
            </summary>
        </member>
        <member name="P:Hx.Common.FullAuditedEntityBase.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Hx.Common.IEntity`1">
            <summary>
            实体接口
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Hx.Common.IEntity`1.Id">
            <summary>
            主键id
            </summary>
        </member>
        <member name="T:Hx.Common.DateTimeJsonConverter">
            <summary>
            时间格式化
            </summary>
        </member>
        <member name="M:Hx.Common.DateTimeJsonConverter.#ctor">
            <summary>
            时间格式化
            使用内置的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Common.DateTimeJsonConverter.#ctor(System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="P:Hx.Common.DateTimeJsonConverter.DateTimeFormat">
            <summary>
            获取或设置DateTime格式
            <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>           
        </member>
        <member name="M:Hx.Common.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Common.DateTimeNullJsonConverter">
            <summary>
            可空的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Common.DateTimeNullJsonConverter.#ctor">
            <summary>
            时间格式化
            使用内置的时间格式化
            </summary>
        </member>
        <member name="M:Hx.Common.DateTimeNullJsonConverter.#ctor(System.String)">
            <summary>
            时间格式化
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="P:Hx.Common.DateTimeNullJsonConverter.DateTimeFormat">
            <summary>
             获取或设置DateTime格式
             <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>
        </member>
        <member name="M:Hx.Common.DateTimeNullJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.DateTimeNullJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Common.LongJsonConverter">
            <summary>
            时间格式化
            </summary>
        </member>
        <member name="M:Hx.Common.LongJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.LongJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Int64,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Hx.Common.DependencyInjection.DependencyInjectionType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.DependencyInjectionType.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.DependencyInjectionType.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.DependencyInjectionType.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.InjectionPatterns">
            <summary>
            注册范围
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.InjectionPatterns.Self">
            <summary>
            只注册自己
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.InjectionPatterns.FirstInterface">
            <summary>
            第一个接口,默认值
            </summary>
        </member>
        <member name="F:Hx.Common.DependencyInjection.InjectionPatterns.ImplementedInterfaces">
            <summary>
            所有接口
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.InjectionAttribute">
            <summary>
            设置依赖注入方式
            </summary>
        </member>
        <member name="M:Hx.Common.DependencyInjection.InjectionAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="expectInterfaces"></param>
        </member>
        <member name="P:Hx.Common.DependencyInjection.InjectionAttribute.Pattern">
            <summary>
            注册选项，默认为FirstInterface
            </summary>
        </member>
        <member name="P:Hx.Common.DependencyInjection.InjectionAttribute.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Hx.Common.DependencyInjection.InjectionAttribute.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Hx.Common.DependencyInjection.InjectionAttribute.ExpectInterfaces">
            <summary>
            排除接口
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.IScopedDependency">
            <summary>
            每个请求一个实例
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.ISingletonDependency">
            <summary>
            创建单一实例的类
            也被称为 '单例.' 使用单一实例作用域,
            在根容器和所有嵌套作用域内所有的请求都将会返回同一个实例.
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.ITransientDependency">
            <summary>
            每个依赖一个实例(即每次都重新实例),使用每个依赖的作用域, 
            当你解析一个每个依赖一个实例的组件时, 你每次获得一个新的实例.
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.ScopedDependencyAttribute">
            <summary>
            每个请求一个实例
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.SingletonDependencyAttribute">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="T:Hx.Common.DependencyInjection.TransientDependencyAttribute">
            <summary>
            每个依赖一个实例(即每次都重新实例),使用每个依赖的作用域, 
            当你解析一个每个依赖一个实例的组件时, 你每次获得一个新的实例.
            </summary>
        </member>
        <member name="T:Hx.Common.Extensions.DateTimeExtensions">
            <summary>
            时间类型扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.DateTimeExtensions.ConvertToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成 DateTime
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.DateTimeExtensions.ConvertToDateTimeOffset(System.DateTime)">
            <summary>
            将 DateTime 转换成 DateTimeOffset
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.DictionaryExtensions">
            <summary>
            字典类型扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.DictionaryExtensions.AddOrUpdate``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.DictionaryExtensions.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            将字典转化为QueryString格式
            </summary>
            <param name="dict"></param>
            <param name="urlEncode"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.EnumExtension">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetEnumDictionary(System.Type)">
            <summary>
            获取枚举对象Key与名称的字典（缓存）
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetEnumDictionaryItems(System.Type)">
            <summary>
            获取枚举对象Key与名称的字典
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetEnumDescDictionary(System.Type)">
            <summary>
            获取枚举类型key与描述的字典（缓存）
            </summary>
            <param name="enumType"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetEnumDescDictionaryItems(System.Type)">
            <summary>
            获取枚举类型key与描述的字典（没有描述则获取name）
            </summary>
            <param name="enumType"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.TryToGetEnumType(System.Reflection.Assembly,System.String)">
            <summary>
            从程序集中查找指定枚举类型
            </summary>
            <param name="assembly"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.LoadEnumTypeDict(System.Reflection.Assembly)">
            <summary>
            从程序集中加载所有枚举类型
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetDescription(System.Enum)">
            <summary>
            获取枚举的Description
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.GetDescription(System.Object)">
            <summary>
            获取枚举的Description
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.EnumToList(System.Type)">
            <summary>
            将枚举转成枚举信息集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.EnumExtension.EnumToList``1(System.Type)">
            <summary>
            枚举ToList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.EnumEntity">
            <summary>
            枚举实体
            </summary>
        </member>
        <member name="P:Hx.Common.Extensions.EnumEntity.Describe">
            <summary>
            枚举的描述
            </summary>
        </member>
        <member name="P:Hx.Common.Extensions.EnumEntity.Name">
            <summary>
            枚举名称
            </summary>
        </member>
        <member name="P:Hx.Common.Extensions.EnumEntity.Value">
            <summary>
            枚举对象的值
            </summary>
        </member>
        <member name="T:Hx.Common.Extensions.ExpressionExtension">
            <summary>
            lambda扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.ExpressionExtension.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            重新组合两个lambda，并把两个lambda参数合并到一个中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            且操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.IEnumerableExtensions">
            <summary>
            IEnumerable 拓展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            [EF Core] 根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            [EF Core] 根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            [EF Core] 与操作合并多个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}[])">
            <summary>
            [EF Core] 与操作合并多个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}}[])">
            <summary>
            [EF Core] 根据条件成立再构建 WhereOr 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}}[])">
            <summary>
            [EF Core] 根据条件成立再构建 WhereOr 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.IEnumerableExtensions.WhereIF``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="T:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions">
            <summary>
            表达式拓展类
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <param name="mergeWay">组合方式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.GetExpressionPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取Lambda表达式属性名，只限 u=>u.Property 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>属性名</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ExpressionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否是空集合
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <returns>是否为空集合</returns>
        </member>
        <member name="T:Hx.Common.Extensions.LinqBuilder.LinqExpression">
            <summary>
            EF Core Linq 拓展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            [EF Core] 创建 Linq/Lambda 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            [EF Core] 创建 Linq/Lambda 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.And``1">
            <summary>
            [EF Core] 创建 And 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.IndexAnd``1">
            <summary>
            [EF Core] 创建 And 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.Or``1">
            <summary>
            [EF Core] 创建 Or 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.LinqExpression.IndexOr``1">
            <summary>
            [EF Core] 创建 Or 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="T:Hx.Common.Extensions.LinqBuilder.ParameterReplaceExpressionVisitor">
            <summary>
            处理 Lambda 参数不一致问题
            </summary>
        </member>
        <member name="F:Hx.Common.Extensions.LinqBuilder.ParameterReplaceExpressionVisitor.parameterExpressionSetter">
            <summary>
            参数表达式映射集合
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ParameterReplaceExpressionVisitor.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造函数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ParameterReplaceExpressionVisitor.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换表达式参数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Hx.Common.Extensions.LinqBuilder.ParameterReplaceExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            重写基类参数访问器
            </summary>
            <param name="parameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.ListExtensions">
            <summary>
            List扩展类
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.ListExtensions.ForEachAsync``1(System.Collections.Generic.List{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            list异步便利
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ListExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            IEnumerable便利
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ListExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            IEnumerable异步便利
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.MethodInfoExtensions">
            <summary>
            MethodInfo扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.MethodInfoExtensions.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.MethodInfoExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.MethodInfoExtensions.GetDescriptionValue``1(System.Reflection.FieldInfo)">
            <summary>
            获取字段特性
            </summary>
            <param name="field"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.ObjectExtensions">
            <summary>
            Object扩展类
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.IsAnonymous(System.Object)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.GetAncestorTypes(System.Type)">
            <summary>
            获取所有祖先类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.ToTaskResult(System.Object,System.Type)">
            <summary>
            返回异步类型
            </summary>
            <param name="obj"></param>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.ChangeType``1(System.Object)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.ToDictionary``1(System.Object)">
            <summary>
            将对象转字典集合
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.ObjectExtensions.ObjToString(System.Object)">
            <summary>
            对象tostring方法，对象为空返回空字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.PagedQueryableExtensions">
            <summary>
            IQueryable扩展类
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToOrderAndPageList``1(System.Linq.IQueryable{``0},Hx.Common.BasePageParam)">
            <summary>
            排序并分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToOrderAndPageListAsync``1(System.Linq.IQueryable{``0},Hx.Common.BasePageParam)">
            <summary>
            排序并分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ApplyOrder``1(System.Linq.IQueryable{``0},System.String,System.Nullable{Hx.Common.OrderTypeEnum})">
            <summary>
            排序
            </summary>
            <typeparam name="T">源数据</typeparam>
            <param name="source"></param>
            <param name="fieldName">排序的字段名称</param>
            <param name="orderType">排序的类型</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToPageList``1(System.Linq.IQueryable{``0},Hx.Common.BasePageParam)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="param">分页的参数</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToPageListAsync``1(System.Linq.IQueryable{``0},Hx.Common.BasePageParam)">
            <summary>
            异步分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="param">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToPageList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.PagedQueryableExtensions.ToPageListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            异步分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.StringExtensions">
            <summary>
            string类型扩展
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.StringExtensions.ToTitlePascal(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.StringExtensions.ToBool(System.String)">
            <summary>
            字符串转为bool值
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果转换成功，返回转换后的值，否则返回null</returns>
        </member>
        <member name="M:Hx.Common.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
            将字符串URL编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Extensions.TypeExtensions">
            <summary>
            类型扩展类
            </summary>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.HasAttribute``1(System.Type)">
            <summary>
            判断该类型上是否有指定的属性
            </summary>
            <typeparam name="T">属性的类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            根据键得到值，如果没有返回默认值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetInheritedMethod(System.Type,System.String)">
            <summary>
            根据名字获取方法的元数据
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetFieldOrProperty(System.Type,System.String)">
            <summary>
            得到指定名字的字段或者属性
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetMember(System.Type,System.String)">
            <summary>
            得到类型中指定名称的成员
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            是否是Nullable类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetTypeOfNullable(System.Type)">
            <summary>
            获取Nullable类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsCollectionType(System.Type)">
            <summary>
            是否是集合类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsEnumerableType(System.Type)">
            <summary>
            是否是枚举类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsQueryableType(System.Type)">
            <summary>
            是否是IQueryable类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsListType(System.Type)">
            <summary>
            是否是List类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsListOrDictionaryType(System.Type)">
            <summary>
            是否是List或者Dictionary类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsDictionaryType(System.Type)">
            <summary>
            是否是Dictionary类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.ImplementsGenericInterface(System.Type,System.Type)">
            <summary>
            判断当前类是否实现了泛型接口
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsGenericType(System.Type,System.Type)">
            <summary>
            是否是某个泛型类型
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetIEnumerableType(System.Type)">
            <summary>
            获取IEnumerable的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetDictionaryType(System.Type)">
            <summary>
            获取Dictionary的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetGenericInterface(System.Type,System.Type)">
            <summary>
            获取泛型接口
            </summary>
            <param name="type"></param>
            <param name="genericInterface"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetGenericInterfaces(System.Type,System.Type)">
            <summary>
            得到所有的泛型接口类型
            </summary>
            <param name="type"></param>
            <param name="genericInterface"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetGenericElementType(System.Type)">
            <summary>
            获取ElementType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsAssignableFromGenericType(System.Type,System.Type)">
            <summary>
            确定是否可以将指定类型的实例分配给当前泛型类型的变量。
            </summary>
            <param name="genericType">当前泛型类型</param>
            <param name="givenType">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.IsAsync(System.Type)">
            <summary>
            判断类型是否是异步类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Hx.Common.Extensions.TypeExtensions.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.ArrayHelper">
            <summary>
            数组帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.ArrayHelper.ReadAllBytesFromStream(System.IO.Stream)">
            <summary>
            把流转换为字节数组
            </summary>
            <param name="stream"></param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Hx.Common.ArrayHelper.RemoveArrayItem``1(``0[],``0)">
            <summary>
            移除数组中的某一项，并返回剩余项的数组
            </summary>
            <typeparam name="T">泛型，数组类型</typeparam>
            <param name="array">原数组</param>
            <param name="item">要移除的项</param>
            <returns>移除指定项后的数组</returns>
        </member>
        <member name="M:Hx.Common.ArrayHelper.ArrayMerge``1(``0[],``0[])">
            <summary>
            把两个数组进行合并
            </summary>
            <typeparam name="T">泛型，数组的类型</typeparam>
            <param name="array1">第一个数组</param>
            <param name="array2">第二个数组</param>
            <returns>合并后的数组</returns>
        </member>
        <member name="M:Hx.Common.ArrayHelper.AddArrayItem``1(``0[],``0)">
            <summary>
            向数组中添加项
            </summary>
            <typeparam name="T">泛型，数组的类型</typeparam>
            <param name="array">数组</param>
            <param name="item">要添加的项</param>
            <returns>添加指定项后的数组</returns>
        </member>
        <member name="M:Hx.Common.ArrayHelper.AddArrayItem``1(``0[],``0[])">
            <summary>
            向数组中添加多个项
            </summary>
            <typeparam name="T">泛型，数组的类型</typeparam>
            <param name="array1">原数组</param>
            <param name="array2">添加的数组的项</param>
            <returns>添加后的数组</returns>
        </member>
        <member name="M:Hx.Common.ArrayHelper.JoinString``1(``0[],System.String)">
            <summary>
            把数组使用指定的分隔符进行分割
            </summary>
            <typeparam name="T">泛型，数组类型</typeparam>
            <param name="arrayList">数组</param>
            <param name="separator">分隔符</param>
            <returns>分割后的字符串</returns>
        </member>
        <member name="T:Hx.Common.ByteHelper">
            <summary>
            字节帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.ByteHelper.ToObject(System.Byte[])">
            <summary>
            把字节数组转换为对象
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.ByteHelper.ToObject``1(System.Byte[])">
            <summary>
            把字节数组转换成指定的对象
            </summary>
            <typeparam name="TInfo"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.ByteHelper.ToBytes(System.Object)">
            <summary>
            把对象转换成字节数组
            </summary>
            <param name="objInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.ConsoleHelper">
            <summary>
            控制台帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.ConsoleHelper.WriteErrorLine(System.String,System.Boolean,System.ConsoleColor)">
            <summary>
            打印错误信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="newLine">是否在后面添加一行空行</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Hx.Common.ConsoleHelper.WriteWarningLine(System.String,System.Boolean,System.ConsoleColor)">
            <summary>
            打印警告信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="newLine">是否在后面添加一行空行</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Hx.Common.ConsoleHelper.WriteInfoLine(System.String,System.Boolean,System.ConsoleColor)">
            <summary>
            打印正常信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="newLine">是否在后面添加一行空行</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Hx.Common.ConsoleHelper.WriteSuccessLine(System.String,System.Boolean,System.ConsoleColor)">
            <summary>
            打印成功的信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="newLine">是否在后面添加一行空行</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="T:Hx.Common.EmailHelper">
            <summary>
            邮箱发送帮助类
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailFrom">
            <summary>
            发送者
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailToArray">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailCcArray">
            <summary>
            抄送
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailSubject">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailBody">
            <summary>
            正文
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.MailPwd">
            <summary>
            发件人密码
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.Host">
            <summary>
            SMTP邮件服务器
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.IsbodyHtml">
            <summary>
            正文是否是html格式
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.Nickname">
            <summary>
            发送者昵称
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.AttachmentsPath">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:Hx.Common.EmailHelper.Priority">
            <summary>
            优先级别  默认正常优先级
            </summary>
        </member>
        <member name="M:Hx.Common.EmailHelper.TempBody(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            {0}:用户名
            {1}{2}{3}:正文内容
            </summary>
        </member>
        <member name="M:Hx.Common.EmailHelper.Send(System.Action{System.Net.Mail.MailMessage},System.Action{System.Net.Mail.MailMessage,System.Exception})">
            <summary>
            邮件发送
            </summary>
            <param name="CallSuccess">发送成功回调</param>
            <param name="CallFailure">发送失败回调</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.EmailHelper.SendAsync(System.Action{System.Boolean,System.Exception})">
            <summary>
            异步发送邮件
            </summary>
            <param name="emailCompleted">邮件发送完成时需要调用的方法</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.EmailHelper.SendAsyncCancel">
            <summary>
            取消异步发送，和SendAsync对应
            </summary>
        </member>
        <member name="T:Hx.Common.ErrorHelper">
            <summary>
            错误帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.ErrorHelper.ThrowIfNull(System.Object,System.String)">
            <summary>
            如果对象为null时，抛出异常
            </summary>
            <param name="value">对象信息</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Hx.Common.ErrorHelper.ThrowIfTrue(System.Nullable{System.Boolean},System.String)">
            <summary>
            如果对象为null时，抛出异常
            </summary>
            <param name="value">对象信息</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Hx.Common.ErrorHelper.ThrowIfFalse(System.Nullable{System.Boolean},System.String)">
            <summary>
            如果对象为null时，抛出异常
            </summary>
            <param name="value">对象信息</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Hx.Common.ErrorHelper.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            如果对象为null时，抛出异常
            </summary>
            <param name="value">对象信息</param>
            <param name="message">异常信息</param>
        </member>
        <member name="T:Hx.Common.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.FileHelper.GetFile(System.String)">
            <summary>
            读取文件的字节数组
            </summary>
            <param name="fileFullPath">文件的全路径</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.GetString(System.String)">
            <summary>
            读取文件的文本
            </summary>
            <param name="fileFullPath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.GetString(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码读取文件的文本
            </summary>
            <param name="fileFullPath">文件路径</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.RemoveFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fullFilePath">文件全路径</param>
        </member>
        <member name="M:Hx.Common.FileHelper.TryDelete(System.String)">
            <summary>
            删除文件，不会报错
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Hx.Common.FileHelper.TryCreateDirectory(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Hx.Common.FileHelper.ExistDirectory(System.String)">
            <summary>
            判断是否存在文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.ExistFile(System.String)">
            <summary>
            判断是否存在文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。 如果目标文件已存在，则覆盖该文件
            </summary>
            <param name="path">要写入的文件。</param>
            <param name="bytes">要写入的字节数组</param>
        </member>
        <member name="M:Hx.Common.FileHelper.TryCopy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="sourceFileName">源文件全路径</param>
            <param name="destFileName">目标文件全路径</param>
        </member>
        <member name="M:Hx.Common.FileHelper.IsImageFile(System.String)">
            <summary>
            根据文件扩展名称判断是否是图片文件
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.FileSizeToShow(System.Int64)">
            <summary>
            根据文件大小返回文件描述的文本
            如1024返回1KB
            </summary>
            <param name="fileSize"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.FileHelper.GetFileSizeDes(System.Int64)">
            <summary>
            根据字节大小获取文件的大小描述
            </summary>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Helper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="F:Hx.Common.Helper.Regex_IDCard">
            <summary>
            身份证
            </summary>
        </member>
        <member name="F:Hx.Common.Helper.Regex_ZipCode">
            <summary>
            邮编
            </summary>
        </member>
        <member name="M:Hx.Common.Helper.AreEqual(System.String,System.String)">
            <summary>
            比较字符串，忽略大小写
            </summary>
        </member>
        <member name="M:Hx.Common.Helper.IsYes(System.String)">
            <summary>
            判断当前字符串是否为Y
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.IsNo(System.String)">
            <summary>
            判断当前字符串是否为N
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.AreEqual(System.Boolean,System.String,System.String[])">
            <summary>
            批量比较字符串
            </summary>
            <param name="andOr">True:比较时以And作为标准.False:比较时以Or作为标准.</param>
            <param name="firstValue">比较值</param>
            <param name="valueArray">比较字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.ToStr(System.Object)">
            <summary>
            转化为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.NlTobr(System.String)">
            <summary>
            将纯文本中的回车换行转换为Web中的<br/>标签
            </summary>
            <param name="source">TextArea带回车换行的文本</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.ToHex(System.Object)">
            <summary>
            将对象转换成16进制的字符形式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.FromHex(System.String)">
            <summary>
            将16进制的字符形式转换成字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetLongSnowId">
            <summary>
            获取雪花ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetSnowId">
            <summary>
            获取雪花ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetYearAndMonth(System.String,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="absID">日期格式为2018-01或者201801或者2018/01</param>
            <param name="year"></param>
            <param name="month"></param>
        </member>
        <member name="M:Hx.Common.Helper.GetFirstDate(System.String)">
            <summary>
            返回当前日期第一天的日期对象
            </summary>
            <param name="absID"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetLastDate(System.String)">
            <summary>
            返回当前日期对应的最后一天的日期对象
            </summary>
            <param name="absID"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetDays(System.Int32,System.Int32)">
            <summary>
            获取指定的年月中那一月的总的天数
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.IsLeapYear(System.Int32)">
            <summary>
            判断所给的年是否是闰年
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetWeekOfYear(System.DateTime)">
            <summary>
            日期是一年中所在的第几周
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetWeekBetween(System.DateTime,System.DateTime)">
            <summary>
            相对开始日期，当前是第几周
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GetTimestamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.Compare(System.Decimal,System.Decimal)">
            <summary>
            比较两个十进制的数值
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.IsGuid(System.String)">
            <summary>
            判断是否是Guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.Clone``1(System.Collections.Generic.List{``0})">
            <summary>
            克隆集合对象
            </summary>
            <typeparam name="TInfo"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.Clone``1(``0)">
            <summary>
            复制对象
            </summary>
            <typeparam name="TInfo"></typeparam>
            <param name="info">info必须具有[Serializable]标签</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.GuessMIME(System.String)">
            <summary>
            根据后缀获取MIME
            </summary>
            <param name="fileExtension">带.后缀</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.DataRowToDictionary(System.Data.DataRow)">
            <summary>
            DataRow 转 Dictionary
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.CelsiusToFahrenheit(System.String)">
            <summary>
            摄氏温度转换成华氏温度
            </summary>
            <param name="temperatureCelsius"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Helper.FahrenheitToCelsius(System.String)">
            <summary>
            华氏温度转换成摄氏温度
            </summary>
            <param name="temperatureFahrenheit"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.HtmlHelper">
            <summary>
            Html帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.HtmlHelper.GetHtmlImageUrlList(System.String)">
             <summary>
            从html文本中获取图片链接
             </summary>
             <param name="sHtmlText"></param>
             <returns></returns>
        </member>
        <member name="M:Hx.Common.HtmlHelper.FilterHtml(System.String,System.Int32,System.Boolean)">
            <summary>
            过滤html中的p标签
            </summary>
            <param name="html">html字符串</param>
            <param name="maxSize">返回的字符串最大长度为多少</param>
            <param name="onlyText">是否只返回纯文本，还是返回带有标签的</param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.PinYinHelper">
            <summary>
            拼音的帮助类
            </summary>
        </member>
        <member name="F:Hx.Common.PinYinHelper.strChineseFirstPY">
             summary>
            汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 GetChineseSpell 函数使用,本表收录的字符的Unicode编码范围为19968至40869
             /summary>
        </member>
        <member name="F:Hx.Common.PinYinHelper.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:Hx.Common.PinYinHelper.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:Hx.Common.PinYinHelper.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.PinYinHelper.GetFullPYLetters(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            如：质管部->ZhiGuanBu
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="M:Hx.Common.PinYinHelper.GetShortPYLetters(System.String)">
            <summary>
            获得一个字符串的汉语拼音码,
            如：质管部->ZGB
            </summary>
            <param name="strText">字符串</param>
            汉语拼音码,该字符串只包含大写的英文字母
        </member>
        <member name="M:Hx.Common.PinYinHelper.GetFirstPYLetter(System.String)">
            <summary>
            获取字符的首个拼音的首个字母
            如：质管部->Z
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Snowflake">
            <summary>
            动态生产有规律的ID Snowflake算法是Twitter的工程师为实现递增而不重复的ID实现的
            C# 实现 Snowflake算法 
            </summary>
        </member>
        <member name="M:Hx.Common.Snowflake.GetTimestamp">
            <summary>
            生成当前时间戳
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:Hx.Common.Snowflake.GetNextTimestamp(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Snowflake.GetId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.TypeHelper">
            <summary>
            类型帮助类
            </summary>
        </member>
        <member name="F:Hx.Common.TypeHelper.MIN_DATETIME">
            <summary>
            最小的时间对象
            </summary>
        </member>
        <member name="F:Hx.Common.TypeHelper.MAX_DATETIME">
            <summary>
            设置最大的时间对象
            </summary>
        </member>
        <member name="F:Hx.Common.TypeHelper.MIN_DECIMAL">
            <summary>
            最小的十进制数值
            </summary>
        </member>
        <member name="F:Hx.Common.TypeHelper.MAX_DECIMAL">
            <summary>
            最大的十进制数值
            </summary>
        </member>
        <member name="M:Hx.Common.TypeHelper.IsNull(System.Object)">
            <summary>
            判断给定的值是否为空
            </summary>
            <param name="value"></param>
            <returns>true代表为空，false代表不为空</returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.IsNotNull(System.Object)">
            <summary>
            判断给定的值是否不为空
            </summary>
            <param name="value"></param>
            <returns>true代表不为空;false代表为空</returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetInt64(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 64位带符号整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetNInt64(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 64位带符号整数，可返回null值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetInt32(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 32位带符号整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetNInt32(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 32位带符号整数，可返回null值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetInt16(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 16位带符号整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetNInt16(System.Object)">
            <summary>
            将指定值表示形式转换为等效的 16位带符号整数，可返回null值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetDecimal(System.Object)">
            <summary>
            将指定的对象栓换成十进制数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetNDecimal(System.Object)">
            <summary>
            将指定的对象栓换成十进制数值，可返回null值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.IsOverDecimal(System.Decimal)">
            <summary>
            是否超出了十进制的范围
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetDateTime(System.Object)">
            <summary>
            将指定的对象转换成时间,如果给定的值为null则返回当前时间
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetNDateTime(System.Object)">
            <summary>
            将指定的对象转换成时间,如果给定的值为null则返回null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetString(System.Object)">
            <summary>
            将制定的对象转换成等效的字符串形式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetBoolean(System.Object)">
            <summary>
            判断该值是否等于Y
            </summary>
            <param name="value">要与Y比较的值</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.GetBoolean(System.Object,System.String)">
            <summary>
            判断对象是否与另一个字符串相等
            </summary>
            <param name="value"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.TypeHelper.Abs(System.Decimal)">
            <summary>
            取绝对值
            </summary>
        </member>
        <member name="M:Hx.Common.TypeHelper.Abs(System.Decimal,System.Decimal)">
            <summary>
            取绝对值, 且等于0时,使用1替换
            </summary>
        </member>
        <member name="T:Hx.Common.AjaxResult`1">
            <summary>
            ajax返回结果统一封装
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Hx.Common.AjaxResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Hx.Common.PagedListResult`1">
            <summary>
            分页泛型集合
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Hx.Common.PagedListResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Common.PagedListResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">数据集合</param>
            <param name="total">总条数</param>
        </member>
        <member name="M:Hx.Common.PagedListResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">数据集合</param>
            <param name="total">总条数</param>
            <param name="page">当前页码</param>
            <param name="pageSize">每页条数</param>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.Page">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.Total">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.HasPrevPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Hx.Common.PagedListResult`1.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:Hx.Common.Security.SafeHelper">
            <summary>
            一些加密解密的操作类
            </summary>
        </member>
        <member name="M:Hx.Common.Security.SafeHelper.DESEncrypt(System.String,System.String)">
            <summary>
            进行DES加密
            </summary>
            <param name="pToEncrypt">要加密的字符串</param>
            <param name="sKey">密钥，必须为8位</param>
            <returns>以Base64格式返回的加密字符串</returns>
        </member>
        <member name="M:Hx.Common.Security.SafeHelper.DESDecrypt(System.String,System.String)">
            <summary>
            进行DES解密
            </summary>
            <param name="pToDecrypt">要解密的字符串</param>
            <param name="sKey">密钥，必须为8位</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="M:Hx.Common.Security.SafeHelper.Md5Encrypt(System.String)">
            <summary>
            32位的MD5加密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Serialization.Compressor">
            <summary>
            压缩类，用来压缩流数据
            </summary>
        </member>
        <member name="M:Hx.Common.Serialization.Compressor.#ctor">
            <summary>
            初始化压缩类，默认overSize是0x3e8
            </summary>
        </member>
        <member name="M:Hx.Common.Serialization.Compressor.#ctor(System.Int32)">
            <summary>
            初始化压缩类，并设置最大的流的大小，默认是0x3e8
            </summary>
            <param name="oversize"></param>
        </member>
        <member name="M:Hx.Common.Serialization.Compressor.Compress(System.Byte[])">
            <summary>
            如果传进来的字节数组的长度大于设置的overSize，则对传进来的基础流进行压缩
            </summary>
            <param name="val">要压缩的流</param>
            <returns>压缩后的流</returns>
        </member>
        <member name="M:Hx.Common.Serialization.Compressor.Decompress(System.Byte[])">
            <summary>
            对传进来的流进行解压缩
            </summary>
            <param name="val">需要解压缩的流</param>
            <returns>解压缩后的流</returns>
        </member>
        <member name="T:Hx.Common.Serialization.Serializer">
            <summary>
            序列化类
            </summary>
        </member>
        <member name="M:Hx.Common.Serialization.Serializer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Hx.Common.Serialization.Serializer.#ctor(System.Int32)">
            <summary>
            初始化序列化对象，设置序列化时字节数组的最大长度，如果超出该长度
            则对字节数组进行压缩，默认overSIze=0x3e8
            </summary>
            <param name="overSize"></param>
        </member>
        <member name="M:Hx.Common.Serialization.Serializer.BinaryDeserialize``1(System.Byte[])">
            <summary>
            把字节数组进行反序列化为指定的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Serialization.Serializer.BinarySerialize``1(``0)">
            <summary>
            把对象序列化为字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Hx.Common.Xml.XmlHelper">
            <summary>
            Xml的帮助类
            </summary>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.AppendAttribute(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            向指定的Xml文档的置顶元素中插入属性
            </summary>
            <param name="xml">Xml文档</param>
            <param name="element">要设置属性的元素</param>
            <param name="attributeName">属性的名称</param>
            <param name="attributeValue">属性值</param>
            <returns>设置的属性元素对象</returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.AppendElement(System.Xml.XmlDocument,System.Xml.XmlElement,System.String)">
            <summary>
            向Xml文档中追加节点
            </summary>
            <param name="xml">Xml文档</param>
            <param name="parentElement">要追加的元素节点的父元素</param>
            <param name="elementName">要追加的元素节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.AppendElement(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            向Xml文档中追加元素节点，并设置元素节点的值
            </summary>
            <param name="xml">Xml文档</param>
            <param name="parentElement">要追加的元素节点的父元素</param>
            <param name="elementName">要追加的元素节点的名称</param>
            <param name="elementValue">要追加的元素节点中的值</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.CreateElement(System.Xml.XmlDocument,System.String)">
            <summary>
            创建一个Xml元素节点
            </summary>
            <param name="xml">Xml文档</param>
            <param name="elementName">要创建的元素的名称</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.CreateElement(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            创建一个Xml元素节点，并设置元素节点中的值
            </summary>
            <param name="xml">Xml文档</param>
            <param name="elementName">要创建的元素的名称</param>
            <param name="elementValue">要创建的元素节点中的值</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.AppendXmlDeclaration(System.Xml.XmlDocument)">
            <summary>
            创建一个XMl的声明
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.AppendMainElement(System.Xml.XmlDocument,System.String)">
            <summary>
            追加到Xml文档的末尾
            </summary>
            <param name="xml"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.ToString(System.Xml.XmlDocument)">
            <summary>
            把Xml文档转换成字符串
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.ToString(System.Xml.XmlDocument,System.Xml.Formatting)">
            <summary>
            使用指定的缩进方式返回Xml的字符串
            </summary>
            <param name="xml">Xml文档</param>
            <param name="format">缩进方式</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.ToXml(System.String)">
            <summary>
            把Xml格式的字符串转换成Xml对象
            </summary>
            <param name="xmlSource"></param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="xml">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.Deserialize``1(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="stream">反序列化的流</param>
            <returns></returns>
        </member>
        <member name="M:Hx.Common.Xml.XmlHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
    </members>
</doc>
